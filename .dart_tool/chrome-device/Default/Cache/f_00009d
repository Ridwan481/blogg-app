define(['dart_sdk', 'packages/flutter/src/widgets/scrollbar.dart', 'packages/flutter/src/material/material_state.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/widgets/widget_span.dart'], (function load__packages__flutter__src__material__scrollbar_dart(dart_sdk, packages__flutter__src__widgets__scrollbar$46dart, packages__flutter__src__material__material_state$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__widgets__widget_span$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const scrollbar = packages__flutter__src__widgets__scrollbar$46dart.src__widgets__scrollbar;
  const material_state = packages__flutter__src__material__material_state$46dart.src__material__material_state;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const theme$ = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const color_scheme = packages__flutter__src__material__icon_button$46dart.src__material__color_scheme;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  var scrollbar$ = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(false);
  var T = Object.create({
    LinkedHashSetOfMaterialState: () => (T.LinkedHashSetOfMaterialState = dart.constFn(collection.LinkedHashSet$(material_state.MaterialState)))(),
    VoidToColor: () => (T.VoidToColor = dart.constFn(dart.fnType(ui.Color, [])))(),
    ColorTodynamic: () => (T.ColorTodynamic = dart.constFn(dart.fnType(dart.dynamic, [ui.Color])))(),
    SetOfMaterialState: () => (T.SetOfMaterialState = dart.constFn(core.Set$(material_state.MaterialState)))(),
    SetOfMaterialStateToColor: () => (T.SetOfMaterialStateToColor = dart.constFn(dart.fnType(ui.Color, [T.SetOfMaterialState()])))(),
    SetOfMaterialStateTodouble: () => (T.SetOfMaterialStateTodouble = dart.constFn(dart.fnType(core.double, [T.SetOfMaterialState()])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))()
  });
  var S = Object.create({
    _: () => S
  });
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name]: "Brightness.light",
        index: 1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name]: "Brightness.dark",
        index: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 200000
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$]: "TargetPlatform.android",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$]: "TargetPlatform.iOS",
        index: 2
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$]: "TargetPlatform.linux",
        index: 3
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$]: "TargetPlatform.fuchsia",
        index: 1
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$]: "TargetPlatform.macOS",
        index: 4
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$]: "TargetPlatform.windows",
        index: 5
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 8,
        [Radius_x]: 8
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 600000
      });
    }
  }, false);
  var C = Array(13).fill(void 0);
  var I = [
    "file:///C:/flutter/packages/flutter/lib/src/material/scrollbar.dart",
    "package:flutter/src/material/scrollbar.dart"
  ];
  var showTrackOnHover$ = dart.privateName(scrollbar$, "Scrollbar.showTrackOnHover");
  var hoverThickness$ = dart.privateName(scrollbar$, "Scrollbar.hoverThickness");
  scrollbar$.Scrollbar = class Scrollbar extends scrollbar.RawScrollbar {
    get showTrackOnHover() {
      return this[showTrackOnHover$];
    }
    set showTrackOnHover(value) {
      super.showTrackOnHover = value;
    }
    get hoverThickness() {
      return this[hoverThickness$];
    }
    set hoverThickness(value) {
      super.hoverThickness = value;
    }
    createState() {
      return new scrollbar$._ScrollbarState.new();
    }
  };
  (scrollbar$.Scrollbar.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[0], 60, 21, "child");
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let isAlwaysShown = opts && 'isAlwaysShown' in opts ? opts.isAlwaysShown : false;
    if (isAlwaysShown == null) dart.nullFailed(I[0], 62, 10, "isAlwaysShown");
    let showTrackOnHover = opts && 'showTrackOnHover' in opts ? opts.showTrackOnHover : false;
    if (showTrackOnHover == null) dart.nullFailed(I[0], 63, 10, "showTrackOnHover");
    let hoverThickness = opts && 'hoverThickness' in opts ? opts.hoverThickness : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[showTrackOnHover$] = showTrackOnHover;
    this[hoverThickness$] = hoverThickness;
    scrollbar$.Scrollbar.__proto__.new.call(this, {key: key, child: child, controller: controller, isAlwaysShown: isAlwaysShown, thickness: thickness, radius: radius, fadeDuration: scrollbar$._kScrollbarFadeDuration, timeToFade: scrollbar$._kScrollbarTimeToFade, pressDuration: core.Duration.zero, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = scrollbar$.Scrollbar.prototype;
  dart.addTypeTests(scrollbar$.Scrollbar);
  dart.addTypeCaches(scrollbar$.Scrollbar);
  dart.setMethodSignature(scrollbar$.Scrollbar, () => ({
    __proto__: dart.getMethods(scrollbar$.Scrollbar.__proto__),
    createState: dart.fnType(scrollbar$._ScrollbarState, [])
  }));
  dart.setLibraryUri(scrollbar$.Scrollbar, I[1]);
  dart.setFieldSignature(scrollbar$.Scrollbar, () => ({
    __proto__: dart.getFields(scrollbar$.Scrollbar.__proto__),
    showTrackOnHover: dart.finalFieldType(core.bool),
    hoverThickness: dart.finalFieldType(dart.nullable(core.double))
  }));
  var ___ScrollbarState__hoverAnimationController = dart.privateName(scrollbar$, "_#_ScrollbarState#_hoverAnimationController");
  var ___ScrollbarState__hoverAnimationController_isSet = dart.privateName(scrollbar$, "_#_ScrollbarState#_hoverAnimationController#isSet");
  var _dragIsActive = dart.privateName(scrollbar$, "_dragIsActive");
  var _hoverIsActive = dart.privateName(scrollbar$, "_hoverIsActive");
  var ___ScrollbarState__colorScheme = dart.privateName(scrollbar$, "_#_ScrollbarState#_colorScheme");
  var ___ScrollbarState__colorScheme_isSet = dart.privateName(scrollbar$, "_#_ScrollbarState#_colorScheme#isSet");
  var ___ScrollbarState__useAndroidScrollbar = dart.privateName(scrollbar$, "_#_ScrollbarState#_useAndroidScrollbar");
  var ___ScrollbarState__useAndroidScrollbar_isSet = dart.privateName(scrollbar$, "_#_ScrollbarState#_useAndroidScrollbar#isSet");
  var _hoverAnimationController = dart.privateName(scrollbar$, "_hoverAnimationController");
  var _colorScheme = dart.privateName(scrollbar$, "_colorScheme");
  var _useAndroidScrollbar = dart.privateName(scrollbar$, "_useAndroidScrollbar");
  var _states = dart.privateName(scrollbar$, "_states");
  var _name = dart.privateName(ui, "_name");
  var _thumbColor = dart.privateName(scrollbar$, "_thumbColor");
  var Color_value = dart.privateName(ui, "Color.value");
  var _trackColor = dart.privateName(scrollbar$, "_trackColor");
  var _trackBorderColor = dart.privateName(scrollbar$, "_trackBorderColor");
  var _thickness = dart.privateName(scrollbar$, "_thickness");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _name$ = dart.privateName(platform, "_name");
  scrollbar$._ScrollbarState = class _ScrollbarState extends scrollbar.RawScrollbarState$(scrollbar$.Scrollbar) {
    get [_hoverAnimationController]() {
      let t0;
      return dart.test(this[___ScrollbarState__hoverAnimationController_isSet]) ? (t0 = this[___ScrollbarState__hoverAnimationController], t0) : dart.throw(new _internal.LateError.fieldNI("_hoverAnimationController"));
    }
    set [_hoverAnimationController](t0) {
      if (t0 == null) dart.nullFailed(I[0], 95, 28, "null");
      this[___ScrollbarState__hoverAnimationController_isSet] = true;
      this[___ScrollbarState__hoverAnimationController] = t0;
    }
    get [_colorScheme]() {
      let t1;
      return dart.test(this[___ScrollbarState__colorScheme_isSet]) ? (t1 = this[___ScrollbarState__colorScheme], t1) : dart.throw(new _internal.LateError.fieldNI("_colorScheme"));
    }
    set [_colorScheme](t1) {
      if (t1 == null) dart.nullFailed(I[0], 98, 20, "null");
      this[___ScrollbarState__colorScheme_isSet] = true;
      this[___ScrollbarState__colorScheme] = t1;
    }
    get [_useAndroidScrollbar]() {
      let t2;
      return dart.test(this[___ScrollbarState__useAndroidScrollbar_isSet]) ? (t2 = this[___ScrollbarState__useAndroidScrollbar], t2) : dart.throw(new _internal.LateError.fieldNI("_useAndroidScrollbar"));
    }
    set [_useAndroidScrollbar](t2) {
      if (t2 == null) dart.nullFailed(I[0], 100, 13, "null");
      this[___ScrollbarState__useAndroidScrollbar_isSet] = true;
      this[___ScrollbarState__useAndroidScrollbar] = t2;
    }
    get [_states]() {
      return (() => {
        let t3 = T.LinkedHashSetOfMaterialState().new();
        if (dart.test(this[_dragIsActive])) t3.add(material_state.MaterialState.dragged);
        if (dart.test(this[_hoverIsActive])) t3.add(material_state.MaterialState.hovered);
        return t3;
      })();
    }
    get [_thumbColor]() {
      let onSurface = this[_colorScheme].onSurface;
      let brightness = this[_colorScheme].brightness;
      let dragColor = null;
      let dragColor$35isSet = false;
      function dragColor$35get() {
        return dragColor$35isSet ? dragColor : dart.throw(new _internal.LateError.localNI("dragColor"));
      }
      dart.fn(dragColor$35get, T.VoidToColor());
      function dragColor$35set(t7) {
        if (t7 == null) dart.nullFailed(I[0], 110, 16, "null");
        dragColor$35isSet = true;
        return dragColor = t7;
      }
      dart.fn(dragColor$35set, T.ColorTodynamic());
      let hoverColor = null;
      let hoverColor$35isSet = false;
      function hoverColor$35get() {
        return hoverColor$35isSet ? hoverColor : dart.throw(new _internal.LateError.localNI("hoverColor"));
      }
      dart.fn(hoverColor$35get, T.VoidToColor());
      function hoverColor$35set(t12) {
        if (t12 == null) dart.nullFailed(I[0], 111, 16, "null");
        hoverColor$35isSet = true;
        return hoverColor = t12;
      }
      dart.fn(hoverColor$35set, T.ColorTodynamic());
      let idleColor = null;
      let idleColor$35isSet = false;
      function idleColor$35get() {
        return idleColor$35isSet ? idleColor : dart.throw(new _internal.LateError.localNI("idleColor"));
      }
      dart.fn(idleColor$35get, T.VoidToColor());
      function idleColor$35set(t17) {
        if (t17 == null) dart.nullFailed(I[0], 112, 16, "null");
        idleColor$35isSet = true;
        return idleColor = t17;
      }
      dart.fn(idleColor$35set, T.ColorTodynamic());
      switch (brightness) {
        case C[0] || CT.C0:
        {
          dragColor$35set(onSurface.withOpacity(0.6));
          hoverColor$35set(onSurface.withOpacity(0.5));
          idleColor$35set(onSurface.withOpacity(0.1));
          break;
        }
        case C[1] || CT.C1:
        {
          dragColor$35set(onSurface.withOpacity(0.75));
          hoverColor$35set(onSurface.withOpacity(0.65));
          idleColor$35set(onSurface.withOpacity(0.3));
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      return material_state.MaterialStateProperty.resolveWith(ui.Color, dart.fn(states => {
        if (states == null) dart.nullFailed(I[0], 126, 66, "states");
        if (dart.test(states.contains(material_state.MaterialState.dragged))) return dragColor$35get();
        if (dart.test(states.contains(material_state.MaterialState.hovered)) && dart.test(this.widget.showTrackOnHover)) return hoverColor$35get();
        return dart.nullCheck(ui.Color.lerp(idleColor$35get(), hoverColor$35get(), this[_hoverAnimationController].value));
      }, T.SetOfMaterialStateToColor()));
    }
    get [_trackColor]() {
      let onSurface = this[_colorScheme].onSurface;
      let brightness = this[_colorScheme].brightness;
      return material_state.MaterialStateProperty.resolveWith(ui.Color, dart.fn(states => {
        if (states == null) dart.nullFailed(I[0], 146, 66, "states");
        if (dart.test(states.contains(material_state.MaterialState.hovered)) && dart.test(this.widget.showTrackOnHover)) {
          return dart.equals(brightness, ui.Brightness.light) ? onSurface.withOpacity(0.03) : onSurface.withOpacity(0.05);
        }
        return C[2] || CT.C2;
      }, T.SetOfMaterialStateToColor()));
    }
    get [_trackBorderColor]() {
      let onSurface = this[_colorScheme].onSurface;
      let brightness = this[_colorScheme].brightness;
      return material_state.MaterialStateProperty.resolveWith(ui.Color, dart.fn(states => {
        if (states == null) dart.nullFailed(I[0], 159, 66, "states");
        if (dart.test(states.contains(material_state.MaterialState.hovered)) && dart.test(this.widget.showTrackOnHover)) {
          return dart.equals(brightness, ui.Brightness.light) ? onSurface.withOpacity(0.1) : onSurface.withOpacity(0.25);
        }
        return C[2] || CT.C2;
      }, T.SetOfMaterialStateToColor()));
    }
    get [_thickness]() {
      return material_state.MaterialStateProperty.resolveWith(core.double, dart.fn(states => {
        let t19, t19$;
        if (states == null) dart.nullFailed(I[0], 170, 66, "states");
        if (dart.test(states.contains(material_state.MaterialState.hovered)) && dart.test(this.widget.showTrackOnHover)) {
          t19 = this.widget.hoverThickness;
          return t19 == null ? 12 : t19;
        }
        t19$ = this.widget.thickness;
        return t19$ == null ? 8 / (dart.test(this[_useAndroidScrollbar]) ? 2 : 1) : t19$;
      }, T.SetOfMaterialStateTodouble()));
    }
    initState() {
      super.initState();
      this[_hoverAnimationController] = new animation_controller.AnimationController.new({vsync: this, duration: C[3] || CT.C3});
      this[_hoverAnimationController].addListener(dart.fn(() => {
        this.updateScrollbarPainter();
      }, T.VoidTovoid()));
    }
    didChangeDependencies() {
      let theme = theme$.Theme.of(this.context);
      switch (theme.platform) {
        case C[4] || CT.C4:
        {
          this[_useAndroidScrollbar] = true;
          break;
        }
        case C[5] || CT.C5:
        case C[6] || CT.C6:
        case C[7] || CT.C7:
        case C[8] || CT.C8:
        case C[9] || CT.C9:
        {
          this[_useAndroidScrollbar] = false;
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      super.didChangeDependencies();
    }
    updateScrollbarPainter() {
      let t20, t19;
      this[_colorScheme] = theme$.Theme.of(this.context).colorScheme;
      t19 = this.scrollbarPainter;
      (() => {
        t19.color = this[_thumbColor].resolve(this[_states]);
        t19.trackColor = this[_trackColor].resolve(this[_states]);
        t19.trackBorderColor = this[_trackBorderColor].resolve(this[_states]);
        t19.textDirection = basic.Directionality.of(this.context);
        t19.thickness = this[_thickness].resolve(this[_states]);
        t19.radius = (t20 = this.widget.radius, t20 == null ? dart.test(this[_useAndroidScrollbar]) ? null : scrollbar$._kScrollbarRadius : t20);
        t19.crossAxisMargin = dart.test(this[_useAndroidScrollbar]) ? 0.0 : 2;
        t19.minLength = 48;
        t19.padding = media_query.MediaQuery.of(this.context).padding;
        return t19;
      })();
    }
    handleThumbPressStart(localPosition) {
      if (localPosition == null) dart.nullFailed(I[0], 224, 37, "localPosition");
      super.handleThumbPressStart(localPosition);
      this.setState(dart.fn(() => {
        this[_dragIsActive] = true;
      }, T.VoidTovoid()));
    }
    handleThumbPressEnd(localPosition, velocity) {
      if (localPosition == null) dart.nullFailed(I[0], 230, 35, "localPosition");
      if (velocity == null) dart.nullFailed(I[0], 230, 59, "velocity");
      super.handleThumbPressEnd(localPosition, velocity);
      this.setState(dart.fn(() => {
        this[_dragIsActive] = false;
      }, T.VoidTovoid()));
    }
    handleHover(event) {
      if (event == null) dart.nullFailed(I[0], 236, 38, "event");
      super.handleHover(event);
      if (dart.test(this.isPointerOverScrollbar(event.position))) {
        this.setState(dart.fn(() => {
          this[_hoverIsActive] = true;
        }, T.VoidTovoid()));
        this[_hoverAnimationController].forward();
      } else if (dart.test(this[_hoverIsActive])) {
        this.setState(dart.fn(() => {
          this[_hoverIsActive] = false;
        }, T.VoidTovoid()));
        this[_hoverAnimationController].reverse();
      }
    }
    handleHoverExit(event) {
      if (event == null) dart.nullFailed(I[0], 251, 41, "event");
      super.handleHoverExit(event);
      this.setState(dart.fn(() => {
        this[_hoverIsActive] = false;
      }, T.VoidTovoid()));
      this[_hoverAnimationController].reverse();
    }
    dispose() {
      this[_hoverAnimationController].dispose();
      super.dispose();
    }
  };
  (scrollbar$._ScrollbarState.new = function() {
    this[___ScrollbarState__hoverAnimationController] = null;
    this[___ScrollbarState__hoverAnimationController_isSet] = false;
    this[_dragIsActive] = false;
    this[_hoverIsActive] = false;
    this[___ScrollbarState__colorScheme] = null;
    this[___ScrollbarState__colorScheme_isSet] = false;
    this[___ScrollbarState__useAndroidScrollbar] = null;
    this[___ScrollbarState__useAndroidScrollbar_isSet] = false;
    scrollbar$._ScrollbarState.__proto__.new.call(this);
    ;
  }).prototype = scrollbar$._ScrollbarState.prototype;
  dart.addTypeTests(scrollbar$._ScrollbarState);
  dart.addTypeCaches(scrollbar$._ScrollbarState);
  dart.setGetterSignature(scrollbar$._ScrollbarState, () => ({
    __proto__: dart.getGetters(scrollbar$._ScrollbarState.__proto__),
    [_hoverAnimationController]: animation_controller.AnimationController,
    [_colorScheme]: color_scheme.ColorScheme,
    [_useAndroidScrollbar]: core.bool,
    [_states]: core.Set$(material_state.MaterialState),
    [_thumbColor]: material_state.MaterialStateProperty$(ui.Color),
    [_trackColor]: material_state.MaterialStateProperty$(ui.Color),
    [_trackBorderColor]: material_state.MaterialStateProperty$(ui.Color),
    [_thickness]: material_state.MaterialStateProperty$(core.double)
  }));
  dart.setSetterSignature(scrollbar$._ScrollbarState, () => ({
    __proto__: dart.getSetters(scrollbar$._ScrollbarState.__proto__),
    [_hoverAnimationController]: animation_controller.AnimationController,
    [_colorScheme]: color_scheme.ColorScheme,
    [_useAndroidScrollbar]: core.bool
  }));
  dart.setLibraryUri(scrollbar$._ScrollbarState, I[1]);
  dart.setFieldSignature(scrollbar$._ScrollbarState, () => ({
    __proto__: dart.getFields(scrollbar$._ScrollbarState.__proto__),
    [___ScrollbarState__hoverAnimationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___ScrollbarState__hoverAnimationController_isSet]: dart.fieldType(core.bool),
    [_dragIsActive]: dart.fieldType(core.bool),
    [_hoverIsActive]: dart.fieldType(core.bool),
    [___ScrollbarState__colorScheme]: dart.fieldType(dart.nullable(color_scheme.ColorScheme)),
    [___ScrollbarState__colorScheme_isSet]: dart.fieldType(core.bool),
    [___ScrollbarState__useAndroidScrollbar]: dart.fieldType(dart.nullable(core.bool)),
    [___ScrollbarState__useAndroidScrollbar_isSet]: dart.fieldType(core.bool)
  }));
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  dart.defineLazy(scrollbar$, {
    /*scrollbar$._kScrollbarThickness*/get _kScrollbarThickness() {
      return 8;
    },
    /*scrollbar$._kScrollbarThicknessWithTrack*/get _kScrollbarThicknessWithTrack() {
      return 12;
    },
    /*scrollbar$._kScrollbarMargin*/get _kScrollbarMargin() {
      return 2;
    },
    /*scrollbar$._kScrollbarMinLength*/get _kScrollbarMinLength() {
      return 48;
    },
    /*scrollbar$._kScrollbarRadius*/get _kScrollbarRadius() {
      return C[10] || CT.C10;
    },
    /*scrollbar$._kScrollbarFadeDuration*/get _kScrollbarFadeDuration() {
      return C[11] || CT.C11;
    },
    /*scrollbar$._kScrollbarTimeToFade*/get _kScrollbarTimeToFade() {
      return C[12] || CT.C12;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/material/scrollbar.dart", {
    "package:flutter/src/material/scrollbar.dart": scrollbar$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["scrollbar.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/material/scrollbar.dart.lib.js"}');
  // Exports:
  return {
    src__material__scrollbar: scrollbar$
  };
}));

//# sourceMappingURL=scrollbar.dart.lib.js.map
